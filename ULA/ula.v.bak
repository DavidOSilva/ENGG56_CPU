module ula(
  input [31:0] A,B,  // ULA 32-bit Inputs                 
  input [5:0] ALU_Sel,// ULA Selection
  output [31:0] ALU_Out, // ULA 32-bit Output
  output CarryOut // Carry Out Flag
    );
  reg [31:0] ALU_Result;
  wire [32:0] tmp;
  assign ALU_Out = ALU_Result; // ULA out
  assign tmp = {1'b0,A} + {1'b0,B};
  assign CarryOut = tmp[32]; // Carryout flag
    always @(*)
    begin
        case(ALU_Sel)
          6'b011000: ALU_Result = A;
          6'b010100: ALU_Result = B;
          6'b011010: ALU_Result = ~A;
          6'b101100: ALU_Result = ~B;
          6'b111100: ALU_Result = A + B;
          6'b111101: ALU_Result = A + B + 1;
          6'b111001: ALU_Result = A + 1;
          6'b110101: ALU_Result = B + 1;
          6'b111111: ALU_Result = B - A;
          6'b110110: ALU_Result = B - 1;
          6'b111011: ALU_Result = -A;
          6'b001100: ALU_Result = A & B;
          6'b011100: ALU_Result = A | B;
          6'b010000: ALU_Result = 0;
          6'b110001: ALU_Result = 1;
          6'b110010: ALU_Result = -1;
          default: ALU_Result = A + B ; 
        endcase
    end

endmodule
